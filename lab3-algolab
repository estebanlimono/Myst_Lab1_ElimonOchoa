from Risk.NullRiskManagementModel import NullRiskManagementModel
from clr import AddReference
AddReference("System")
AddReference("QuantConnect.Algorithm")
AddReference("QuantConnect.Indicators")
AddReference("QuantConnect.Common")

from System import *
from QuantConnect import *
from QuantConnect.Algorithm import *
from QuantConnect.Indicators import *
from datetime import datetime

#for more data review:
#https://www.quantconnect.com/research/notebook/16213/MyResearch.ipynb
#usamos la paqueteria de señales MACD
class MACDTrendAlgorithm(QCAlgorithm):

    def Initialize(self):
        '''Initialise the data and resolution required, as well as the cash and start-end dates for your algorithm. All algorithms must initialized.'''
        self.ticker='AAPL'#add the ticker, just stocks
        #we can also trade fx or cryptos, but we need to chang add equity
        self.SetStartDate(2012, 1, 1)    #Set Start Date
        self.SetEndDate(DateTime.Today)      #Set End Date
        self.SetCash(100000)             #Set Strategy Cash
        # Find more symbols here: http://quantconnect.com/data
        self.AddEquity(self.ticker, Resolution.Hour)#daily,hour, minute, tick

        # define our daily macd(12,26) with a 9 hour signal
        # how to trade macd https://www.investopedia.com/terms/m/macd.asp
        self.__macd = self.MACD(self.ticker, 12, 26, 9, MovingAverageType.Exponential, Resolution.Hour)
        self.__previous = datetime.min
        self.PlotIndicator("MACD", True, self.__macd, self.__macd.Signal)
        self.PlotIndicator(self.ticker, self.__macd.Fast, self.__macd.Slow)


    def OnData(self, data):
        '''OnData event is the primary entry point for your algorithm. Each new data point will be pumped in here.'''
        # wait for our macd to fully initialize
        if not self.__macd.IsReady: return#se inicializa el macd

        # only once per hour
        if self.__previous.date() == self.Time.date(): return#compara precio anterior con actual

        # define a small tolerance on our checks to avoid bouncing
        tolerance = 0.0025#tolerancia de reobote

        holdings = self.Portfolio[self.ticker].Quantity#Ccantidad de titulos

        signalDeltaPercent = (self.__macd.Current.Value - self.__macd.Signal.Current.Value)/self.__macd.Fast.Current.Value
#se presenta la señal de cambio
        # if our macd is greater than our signal, then let's go long
        #señal para comprar si se tiene <= que cero titulos
        if holdings <= 0 and signalDeltaPercent > tolerance:  # 0.1%
            # longterm says buy as well
            self.SetHoldings(self.ticker, 1.0)

        # of our macd is less than our signal, then let's go short
        elif holdings >= 0 and signalDeltaPercent < -tolerance:
            self.Liquidate(self.ticker)#Se venden los titulos que teniamos

        self.__previous = self.Time
